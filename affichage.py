from PIL import Image
from Correction import correction
import numpy as np
from ArrayGeneration import fullArrayGenerating
import random


matrice = fullArrayGenerating()

matrice = [[int(element) for element in row] for row in matrice]





# appliquer la correction
matrice = correction(matrice)

chemin = [
    [(145, 137, 131), (145, 137, 131), (105, 97, 91), (105, 97, 91), (105, 97, 91), (145, 137, 131), (145, 137, 131),
     (105, 97, 91), (105, 97, 91)],
    [(105, 97, 91), (105, 97, 91), (145, 137, 131), (154, 154, 154), (145, 137, 131), (145, 137, 131), (154, 154, 154),
     (145, 137, 131), (145, 137, 131)],
    [(145, 137, 131), (145, 137, 131), (154, 154, 154), (145, 137, 131), (105, 97, 91), (105, 97, 91), (145, 137, 131),
     (154, 154, 154), (105, 97, 91)],
    [(105, 97, 91), (154, 154, 154), (145, 137, 131), (154, 154, 154), (145, 137, 131), (145, 137, 131),
     (145, 137, 131), (105, 97, 91), (105, 97, 91)],
    [(145, 137, 131), (105, 97, 91), (105, 97, 91), (145, 137, 131), (145, 137, 131), (154, 154, 154), (145, 137, 131),
     (145, 137, 131), (145, 137, 131)],
    [(145, 137, 131), (105, 97, 91), (154, 154, 154), (145, 137, 131), (105, 97, 91), (105, 97, 91), (145, 137, 131),
     (154, 154, 154), (105, 97, 91)],
    [(105, 97, 91), (145, 137, 131), (145, 137, 131), (145, 137, 131), (154, 154, 154), (145, 137, 131),
     (145, 137, 131), (145, 137, 131), (105, 97, 91)],
    [(154, 154, 154), (105, 97, 91), (145, 137, 131), (154, 154, 154), (145, 137, 131), (145, 137, 131),
     (145, 137, 131), (145, 137, 131), (105, 97, 91)],
    [(105, 97, 91), (154, 154, 154), (145, 137, 131), (145, 137, 131), (105, 97, 91), (145, 137, 131), (154, 154, 154),
     (145, 137, 131), (154, 154, 154)]

]
roc = [
    [(35, 35, 34), (5, 4, 4), (35, 35, 34), (5, 4, 4), (35, 35, 34), (5, 4, 4), (35, 35, 34), (35, 35, 34),
     (35, 35, 34)],
    [(5, 4, 4), (35, 35, 34), (35, 35, 34), (16, 16, 16), (35, 35, 34), (68, 68, 68), (35, 35, 34), (35, 35, 34),
     (5, 4, 4)],
    [(16, 16, 16), (28, 28, 28), (35, 35, 34), (5, 4, 4), (35, 35, 34), (35, 35, 34), (68, 68, 68), (35, 35, 34),
     (28, 28, 28)],
    [(35, 35, 34), (16, 16, 16), (35, 35, 34), (28, 28, 28), (28, 28, 28), (5, 4, 4), (5, 4, 4), (35, 35, 34),
     (16, 16, 16)],
    [(5, 4, 4), (28, 28, 28), (28, 28, 28), (16, 16, 16), (28, 28, 28), (28, 28, 28), (28, 28, 28), (5, 4, 4),
     (28, 28, 28)],
    [(35, 35, 34), (5, 4, 4), (35, 35, 34), (28, 28, 28), (28, 28, 28), (16, 16, 16), (16, 16, 16), (35, 35, 34),
     (28, 28, 28)],
    [(5, 4, 4), (16, 16, 16), (16, 16, 16), (5, 4, 4), (5, 4, 4), (5, 4, 4), (35, 35, 34), (16, 16, 16), (35, 35, 34)],
    [(16, 16, 16), (35, 35, 34), (5, 4, 4), (35, 35, 34), (35, 35, 34), (16, 16, 16), (35, 35, 34), (16, 16, 16),
     (5, 4, 4)],
    [(35, 35, 34), (16, 16, 16), (35, 35, 34), (16, 16, 16), (5, 4, 4), (35, 35, 34), (28, 28, 28), (35, 35, 34),
     (16, 16, 16)]

]
coffre = [
    [(255, 217, 114), (155, 114, 44), (155, 114, 44), (155, 114, 44), (255, 217, 114), (155, 114, 44), (155, 114, 44),
     (155, 114, 44), (255, 217, 114)],
    [(255, 250, 204), (219, 194, 151), (219, 194, 151), (219, 194, 151), (255, 217, 114), (219, 194, 151),
     (219, 194, 151), (248, 230, 201), (255, 250, 204)],
    [(255, 250, 204), (155, 114, 44), (155, 114, 44), (155, 114, 44), (255, 217, 114), (155, 114, 44), (155, 114, 44),
     (248, 230, 201), (255, 250, 204)],
    [(255, 217, 114), (108, 77, 28), (108, 77, 28), (123, 117, 102), (162, 161, 159), (162, 161, 159), (108, 77, 28),
     (108, 77, 28), (255, 217, 114)],
    [(255, 217, 114), (255, 217, 114), (255, 250, 204), (123, 117, 102), (42, 42, 41), (162, 161, 159), (255, 250, 204),
     (255, 217, 114), (255, 217, 114)],
    [(255, 250, 204), (108, 77, 28), (108, 77, 28), (123, 117, 102), (123, 117, 102), (123, 117, 102), (108, 77, 28),
     (108, 77, 28), (255, 250, 204)],
    [(255, 250, 204), (155, 114, 44), (155, 114, 44), (155, 114, 44), (155, 114, 44), (155, 114, 44), (155, 114, 44),
     (155, 114, 44), (255, 250, 204)],
    [(255, 217, 114), (108, 77, 28), (108, 77, 28), (108, 77, 28), (108, 77, 28), (108, 77, 28), (108, 77, 28),
     (108, 77, 28), (255, 217, 114)],
    [(153, 92, 0), (153, 92, 0), (153, 92, 0), (153, 92, 0), (153, 92, 0), (153, 92, 0), (153, 92, 0), (153, 92, 0),
     (153, 92, 0)]
]

monstre = [
    [(99, 165, 73), (46, 99, 25), (46, 99, 25), (58, 120, 35), (58, 120, 35), (58, 120, 35), (58, 120, 35), (58, 120, 35), (99, 165, 73)],
    [(42, 93, 22), (99, 165, 73), (172, 218, 153), (172, 218, 153), (58, 120, 35), (172, 218, 153), (172, 218, 153), (99, 165, 73), (42, 93, 22)],
    [(219, 188, 108), (99, 165, 73), (46, 99, 25), (127, 28, 30), (58, 120, 35), (127, 28, 30), (58, 120, 35), (99, 165, 73), (219, 188, 108)],
    [(219, 188, 108), (46, 99, 25), (46, 99, 25), (58, 120, 35), (58, 120, 35), (58, 120, 35), (58, 120, 35), (58, 120, 35), (219, 188, 108)],
    [(219, 188, 108), (46, 99, 25), (58, 120, 35), (30, 75, 12), (58, 120, 35), (30, 75, 12), (58, 120, 35), (58, 120, 35), (219, 188, 108)],
    [(219, 188, 108), (46, 99, 25), (46, 99, 25), (58, 120, 35), (58, 120, 35), (58, 120, 35), (58, 120, 35), (58, 120, 35), (219, 188, 108)],
    [(24, 56, 11), (46, 99, 25), (250, 250, 250), (147, 158, 143), (250, 250, 250), (147, 158, 143), (250, 250, 250), (58, 120, 35), (24, 56, 11)],
    [(24, 56, 11), (42, 93, 22), (99, 165, 73), (58, 120, 35), (58, 120, 35), (58, 120, 35), (99, 165, 73), (42, 93, 22), (24, 56, 11)],
    [(42, 93, 22), (99, 165, 73), (58, 120, 35), (58, 120, 35), (58, 120, 35), (58, 120, 35), (58, 120, 35), (99, 165, 73), (42, 93, 22)]
]

trap = [
    [(77, 55, 43), (106, 78, 61), (106, 78, 61), (127, 85, 61), (106, 78, 61), (106, 78, 61), (106, 78, 61), (158, 137, 124), (158, 137, 124)],
    [(77, 55, 43), (0, 0, 0), (106, 78, 61), (0, 0, 0), (106, 78, 61), (0, 0, 0), (106, 78, 61), (0, 0, 0), (127, 85, 61)],
    [(106, 78, 61), (0, 0, 0), (106, 78, 61), (0, 0, 0), (106, 78, 61), (0, 0, 0), (106, 78, 61), (0, 0, 0), (106, 78, 61)],
    [(106, 78, 61), (0, 0, 0), (106, 78, 61), (0, 0, 0), (106, 78, 61), (0, 0, 0), (106, 78, 61), (0, 0, 0), (106, 78, 61)],
    [(106, 78, 61), (106, 78, 61), (106, 78, 61), (106, 78, 61), (106, 78, 61), (106, 78, 61), (106, 78, 61), (106, 78, 61), (106, 78, 61)],
    [(106, 78, 61), (0, 0, 0), (106, 78, 61), (0, 0, 0), (106, 78, 61), (0, 0, 0), (106, 78, 61), (0, 0, 0), (106, 78, 61)],
    [(77, 55, 43), (0, 0, 0), (106, 78, 61), (0, 0, 0), (106, 78, 61), (0, 0, 0), (106, 78, 61), (0, 0, 0), (106, 78, 61)],
    [(77, 55, 43), (0, 0, 0), (106, 78, 61), (0, 0, 0), (106, 78, 61), (0, 0, 0), (106, 78, 61), (0, 0, 0), (106, 78, 61)],
    [(77, 55, 43), (77, 55, 43), (106, 78, 61), (127, 85, 61), (106, 78, 61), (106, 78, 61), (106, 78, 61), (106, 78, 61), (77, 55, 43)]
]



scale_factor = 10  

def agrandir_bloc(bloc, facteur):
    return np.repeat(np.repeat(np.array(bloc, dtype=np.uint8), facteur, axis=0), facteur, axis=1)



size = int(input("What size is your dungeon: values from 0-5, 5 being the largest, 1 being the smallest: "))
difficulty = int(input("what difficulty is your dungeon? values from 0-3, where0 is easiest, 3 is hardest: "))
matrice = correction(fullArrayGenerating(difficulty, size))

image_grille = []
for ligne in matrice:
    ligne_image = []
    for val in ligne:
        bloc_pattern = chemin if val == 0 else coffre if val == 12 else roc if val == 1 else monstre if val == 13 else trap
        bloc_aggrandi = agrandir_bloc(bloc_pattern, scale_factor)
        ligne_image.append(bloc_aggrandi)
    image_grille.append(np.concatenate(ligne_image, axis=1))

wall_tile = agrandir_bloc(roc, scale_factor)

max_width = max(ligne_image.shape[1] for ligne_image in image_grille)

for i in range(len(image_grille)):
    current_width = image_grille[i].shape[1]
    if current_width < max_width:
        padding_width = max_width - current_width
        num_wall_tiles = padding_width // wall_tile.shape[1]

        padding = np.tile(wall_tile, (1, num_wall_tiles, 1))

        image_grille[i] = np.concatenate((image_grille[i], padding), axis=1)

image_finale_large = np.concatenate(image_grille, axis=0)

image = Image.fromarray(image_finale_large, 'RGB')
image.show()
image.save("matrice_finale_aggrandie.png")